const NUM_DRUM_CLASSES = 9;
exports.NUM_DRUM_CLASSES = NUM_DRUM_CLASSES;

const UNIQUE_DRUM_VALUES = [0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,
    18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,
    36,  37,  38,  39,  40,  42,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
    56,  57,  58,  60,  61,  62,  63,  65,  66,  67,  71,  73,  74,  75,  76,  77,  78,  79,
    81,  83,  84,  86,  87,  93,  94,  98,  99,  100,  101,  103,  104,  105,  106,  109,  115,  130,
    131,  132,  133,  134,  135,  139,  140,  142,  154,  161,  165,  175,  179,  180,  189,  191,  196,  199,
    200,  215,  253,  260,  304,  323,  359,  414,  415];
exports.UNIQUE_DRUM_VALUES = UNIQUE_DRUM_VALUES;

const MIN_PITCH_BASS = 24;
const MAX_PITCH_BASS = 84;
const NUM_BASS_PITCH = MAX_PITCH_BASS - MIN_PITCH_BASS + 1;
const REST_PITCH_BASS = NUM_BASS_PITCH + 0;
const NOTEOFF_PITCH_BASS = NUM_BASS_PITCH + 1;
const NUM_UNIQUE_BASS_VALUES = NUM_BASS_PITCH + 2;

exports.MIN_PITCH_BASS = MIN_PITCH_BASS;
exports.MAX_PITCH_BASS = MAX_PITCH_BASS;
exports.REST_PITCH_BASS = REST_PITCH_BASS;
exports.NOTEOFF_PITCH_BASS = NOTEOFF_PITCH_BASS;
exports.NUM_UNIQUE_BASS_VALUES = NUM_UNIQUE_BASS_VALUES;



const MAGENTA_MIDI_MAP = {
    36: 0,
    38: 1,
    40: 1,
    37: 1,
    42: 2,
    22: 2,
    44: 2,
    46: 3,
    26: 3,
    43: 4,
    58: 4,
    45: 5,
    47: 5,
    48: 6,
    50: 6,
    49: 7,
    55: 7,
    57: 7,
    52: 7,
    51: 8,
    59: 8,
    53: 8,
};
exports.MAGENTA_MIDI_MAP = MAGENTA_MIDI_MAP;

/* From python script */
// DRUM_COMBOS = [[], [0], [1], [2], [3], [4], [5], [6], [7], [8], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [4, 5], [4, 6], [4, 7], [4, 8], [5, 6], [5, 7], [5, 8], [6, 7], [6, 8], [7, 8], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 1, 7], [0, 1, 8], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 2, 7], [0, 2, 8], [0, 3, 4], [0, 3, 5], [0, 3, 6], [0, 3, 7], [0, 3, 8], [0, 4, 5], [0, 4, 6], [0, 4, 7], [0, 4, 8], [0, 5, 6], [0, 5, 7], [0, 5, 8], [0, 6, 7], [0, 6, 8], [0, 7, 8], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 2, 8], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 3, 8], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 4, 8], [1, 5, 6], [1, 5, 7], [1, 5, 8], [1, 6, 7], [1, 6, 8], [1, 7, 8], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 3, 8], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 5, 6], [2, 5, 7], [2, 5, 8], [2, 6, 7], [2, 6, 8], [2, 7, 8], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 4, 8], [3, 5, 6], [3, 5, 7], [3, 5, 8], [3, 6, 7], [3, 6, 8], [3, 7, 8], [4, 5, 6], [4, 5, 7], [4, 5, 8], [4, 6, 7], [4, 6, 8], [4, 7, 8], [5, 6, 7], [5, 6, 8], [5, 7, 8], [6, 7, 8], [0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 2, 7], [0, 1, 2, 8], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 3, 8], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 4, 8], [0, 1, 5, 6], [0, 1, 5, 7], [0, 1, 5, 8], [0, 1, 6, 7], [0, 1, 6, 8], [0, 1, 7, 8], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 3, 8], [0, 2, 4, 5], [0, 2, 4, 6], [0, 2, 4, 7], [0, 2, 4, 8], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 5, 8], [0, 2, 6, 7], [0, 2, 6, 8], [0, 2, 7, 8], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 4, 8], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 5, 8], [0, 3, 6, 7], [0, 3, 6, 8], [0, 3, 7, 8], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 5, 8], [0, 4, 6, 7], [0, 4, 6, 8], [0, 4, 7, 8], [0, 5, 6, 7], [0, 5, 6, 8], [0, 5, 7, 8], [0, 6, 7, 8], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 4, 8], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 6, 7], [1, 2, 6, 8], [1, 2, 7, 8], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 4, 8], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 5, 8], [1, 3, 6, 7], [1, 3, 6, 8], [1, 3, 7, 8], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 5, 8], [1, 4, 6, 7], [1, 4, 6, 8], [1, 4, 7, 8], [1, 5, 6, 7], [1, 5, 6, 8], [1, 5, 7, 8], [1, 6, 7, 8], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 4, 8], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 6, 7], [2, 3, 6, 8], [2, 3, 7, 8], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 5, 8], [2, 4, 6, 7], [2, 4, 6, 8], [2, 4, 7, 8], [2, 5, 6, 7], [2, 5, 6, 8], [2, 5, 7, 8], [2, 6, 7, 8], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 5, 8], [3, 4, 6, 7], [3, 4, 6, 8], [3, 4, 7, 8], [3, 5, 6, 7], [3, 5, 6, 8], [3, 5, 7, 8], [3, 6, 7, 8], [4, 5, 6, 7], [4, 5, 6, 8], [4, 5, 7, 8], [4, 6, 7, 8], [5, 6, 7, 8], [0, 1, 2, 3, 4], [0, 1, 2, 3, 5], [0, 1, 2, 3, 6], [0, 1, 2, 3, 7], [0, 1, 2, 3, 8], [0, 1, 2, 4, 5], [0, 1, 2, 4, 6], [0, 1, 2, 4, 7], [0, 1, 2, 4, 8], [0, 1, 2, 5, 6], [0, 1, 2, 5, 7], [0, 1, 2, 5, 8], [0, 1, 2, 6, 7], [0, 1, 2, 6, 8], [0, 1, 2, 7, 8], [0, 1, 3, 4, 5], [0, 1, 3, 4, 6], [0, 1, 3, 4, 7], [0, 1, 3, 4, 8], [0, 1, 3, 5, 6], [0, 1, 3, 5, 7], [0, 1, 3, 5, 8], [0, 1, 3, 6, 7], [0, 1, 3, 6, 8], [0, 1, 3, 7, 8], [0, 1, 4, 5, 6], [0, 1, 4, 5, 7], [0, 1, 4, 5, 8], [0, 1, 4, 6, 7], [0, 1, 4, 6, 8], [0, 1, 4, 7, 8], [0, 1, 5, 6, 7], [0, 1, 5, 6, 8], [0, 1, 5, 7, 8], [0, 1, 6, 7, 8], [0, 2, 3, 4, 5], [0, 2, 3, 4, 6], [0, 2, 3, 4, 7], [0, 2, 3, 4, 8], [0, 2, 3, 5, 6], [0, 2, 3, 5, 7], [0, 2, 3, 5, 8], [0, 2, 3, 6, 7], [0, 2, 3, 6, 8], [0, 2, 3, 7, 8], [0, 2, 4, 5, 6], [0, 2, 4, 5, 7], [0, 2, 4, 5, 8], [0, 2, 4, 6, 7], [0, 2, 4, 6, 8], [0, 2, 4, 7, 8], [0, 2, 5, 6, 7], [0, 2, 5, 6, 8], [0, 2, 5, 7, 8], [0, 2, 6, 7, 8], [0, 3, 4, 5, 6], [0, 3, 4, 5, 7], [0, 3, 4, 5, 8], [0, 3, 4, 6, 7], [0, 3, 4, 6, 8], [0, 3, 4, 7, 8], [0, 3, 5, 6, 7], [0, 3, 5, 6, 8], [0, 3, 5, 7, 8], [0, 3, 6, 7, 8], [0, 4, 5, 6, 7], [0, 4, 5, 6, 8], [0, 4, 5, 7, 8], [0, 4, 6, 7, 8], [0, 5, 6, 7, 8], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4, 7], [1, 2, 3, 4, 8], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 3, 5, 8], [1, 2, 3, 6, 7], [1, 2, 3, 6, 8], [1, 2, 3, 7, 8], [1, 2, 4, 5, 6], [1, 2, 4, 5, 7], [1, 2, 4, 5, 8], [1, 2, 4, 6, 7], [1, 2, 4, 6, 8], [1, 2, 4, 7, 8], [1, 2, 5, 6, 7], [1, 2, 5, 6, 8], [1, 2, 5, 7, 8], [1, 2, 6, 7, 8], [1, 3, 4, 5, 6], [1, 3, 4, 5, 7], [1, 3, 4, 5, 8], [1, 3, 4, 6, 7], [1, 3, 4, 6, 8], [1, 3, 4, 7, 8], [1, 3, 5, 6, 7], [1, 3, 5, 6, 8], [1, 3, 5, 7, 8], [1, 3, 6, 7, 8], [1, 4, 5, 6, 7], [1, 4, 5, 6, 8], [1, 4, 5, 7, 8], [1, 4, 6, 7, 8], [1, 5, 6, 7, 8], [2, 3, 4, 5, 6], [2, 3, 4, 5, 7], [2, 3, 4, 5, 8], [2, 3, 4, 6, 7], [2, 3, 4, 6, 8], [2, 3, 4, 7, 8], [2, 3, 5, 6, 7], [2, 3, 5, 6, 8], [2, 3, 5, 7, 8], [2, 3, 6, 7, 8], [2, 4, 5, 6, 7], [2, 4, 5, 6, 8], [2, 4, 5, 7, 8], [2, 4, 6, 7, 8], [2, 5, 6, 7, 8], [3, 4, 5, 6, 7], [3, 4, 5, 6, 8], [3, 4, 5, 7, 8], [3, 4, 6, 7, 8], [3, 5, 6, 7, 8], [4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 6], [0, 1, 2, 3, 4, 7], [0, 1, 2, 3, 4, 8], [0, 1, 2, 3, 5, 6], [0, 1, 2, 3, 5, 7], [0, 1, 2, 3, 5, 8], [0, 1, 2, 3, 6, 7], [0, 1, 2, 3, 6, 8], [0, 1, 2, 3, 7, 8], [0, 1, 2, 4, 5, 6], [0, 1, 2, 4, 5, 7], [0, 1, 2, 4, 5, 8], [0, 1, 2, 4, 6, 7], [0, 1, 2, 4, 6, 8], [0, 1, 2, 4, 7, 8], [0, 1, 2, 5, 6, 7], [0, 1, 2, 5, 6, 8], [0, 1, 2, 5, 7, 8], [0, 1, 2, 6, 7, 8], [0, 1, 3, 4, 5, 6], [0, 1, 3, 4, 5, 7], [0, 1, 3, 4, 5, 8], [0, 1, 3, 4, 6, 7], [0, 1, 3, 4, 6, 8], [0, 1, 3, 4, 7, 8], [0, 1, 3, 5, 6, 7], [0, 1, 3, 5, 6, 8], [0, 1, 3, 5, 7, 8], [0, 1, 3, 6, 7, 8], [0, 1, 4, 5, 6, 7], [0, 1, 4, 5, 6, 8], [0, 1, 4, 5, 7, 8], [0, 1, 4, 6, 7, 8], [0, 1, 5, 6, 7, 8], [0, 2, 3, 4, 5, 6], [0, 2, 3, 4, 5, 7], [0, 2, 3, 4, 5, 8], [0, 2, 3, 4, 6, 7], [0, 2, 3, 4, 6, 8], [0, 2, 3, 4, 7, 8], [0, 2, 3, 5, 6, 7], [0, 2, 3, 5, 6, 8], [0, 2, 3, 5, 7, 8], [0, 2, 3, 6, 7, 8], [0, 2, 4, 5, 6, 7], [0, 2, 4, 5, 6, 8], [0, 2, 4, 5, 7, 8], [0, 2, 4, 6, 7, 8], [0, 2, 5, 6, 7, 8], [0, 3, 4, 5, 6, 7], [0, 3, 4, 5, 6, 8], [0, 3, 4, 5, 7, 8], [0, 3, 4, 6, 7, 8], [0, 3, 5, 6, 7, 8], [0, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 5, 8], [1, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 8], [1, 2, 3, 4, 7, 8], [1, 2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 8], [1, 2, 3, 5, 7, 8], [1, 2, 3, 6, 7, 8], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 8], [1, 2, 4, 5, 7, 8], [1, 2, 4, 6, 7, 8], [1, 2, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6, 8], [1, 3, 4, 5, 7, 8], [1, 3, 4, 6, 7, 8], [1, 3, 5, 6, 7, 8], [1, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 8], [2, 3, 4, 5, 7, 8], [2, 3, 4, 6, 7, 8], [2, 3, 5, 6, 7, 8], [2, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 8], [0, 1, 2, 3, 4, 6, 7], [0, 1, 2, 3, 4, 6, 8], [0, 1, 2, 3, 4, 7, 8], [0, 1, 2, 3, 5, 6, 7], [0, 1, 2, 3, 5, 6, 8], [0, 1, 2, 3, 5, 7, 8], [0, 1, 2, 3, 6, 7, 8], [0, 1, 2, 4, 5, 6, 7], [0, 1, 2, 4, 5, 6, 8], [0, 1, 2, 4, 5, 7, 8], [0, 1, 2, 4, 6, 7, 8], [0, 1, 2, 5, 6, 7, 8], [0, 1, 3, 4, 5, 6, 7], [0, 1, 3, 4, 5, 6, 8], [0, 1, 3, 4, 5, 7, 8], [0, 1, 3, 4, 6, 7, 8], [0, 1, 3, 5, 6, 7, 8], [0, 1, 4, 5, 6, 7, 8], [0, 2, 3, 4, 5, 6, 7], [0, 2, 3, 4, 5, 6, 8], [0, 2, 3, 4, 5, 7, 8], [0, 2, 3, 4, 6, 7, 8], [0, 2, 3, 5, 6, 7, 8], [0, 2, 4, 5, 6, 7, 8], [0, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 6, 7, 8], [1, 2, 3, 5, 6, 7, 8], [1, 2, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6, 8], [0, 1, 2, 3, 4, 5, 7, 8], [0, 1, 2, 3, 4, 6, 7, 8], [0, 1, 2, 3, 5, 6, 7, 8], [0, 1, 2, 4, 5, 6, 7, 8], [0, 1, 3, 4, 5, 6, 7, 8], [0, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8]];
// exports.DRUM_COMBOS = this.DRUM_COMBOS;

// Drum Combinations 
function getPermutations(array, all_size) {

    var result = [];
    for (let size=0;  size <= all_size; size++){
        function p(t, i) {
            if (t.length === size) {
                result.push(t);
                return;
            }
            if (i + 1 > array.length) {
                return;
            }
            p(t.concat(array[i]), i + 1);
            p(t, i + 1);
        }        
        p([], 0);
    }
    return result;
}
let  drumArray = [];
for (let i=0; i < NUM_DRUM_CLASSES; i++) {
    drumArray.push(i);
}
DRUM_COMBOS = getPermutations(drumArray, NUM_DRUM_CLASSES);
exports.DRUM_COMBOS = DRUM_COMBOS;

// Find ID in DRUM_COMBO array
function getDrumComboId(inputArray){
    if (inputArray.length == 0) return 0; 

    inputArray.sort();    
    for (let i = 0; i < DRUM_COMBOS.length; i++){
        if (DRUM_COMBOS[i].length == inputArray.length && 
            DRUM_COMBOS[i].every((val, index) => val === inputArray[index]))
            return i + 1; // 0 is for empty
    }
    console.error("Something wrong with drum id", inputArray);
    return -1; // error
}
exports.getDrumComboId = getDrumComboId;

// let drumId = getDrumComboId([0])
// console.log(drumId, DRUM_COMBOS[drumId]);

// const test_input = [[36, 0., 0.25, 127, 0],
// [36, 2., 0.25, 127, 0],
// [36, 4., 0.25, 127, 0],
// [36, 6., 0.25, 127, 0],
// [36, 8., 0.25, 127, 0],
// [36, 10., 0.25, 127, 0],
// [36, 12., 0.25, 127, 0],
// [36, 14., 0.25, 127, 0],
// [38, 1., 0.25, 127, 0],
// [38, 3., 0.25, 127, 0],
// [38, 5., 0.25, 127, 0],
// [38, 7., 0.25, 127, 0],
// [38, 9., 0.25, 127, 0],
// [38, 11., 0.25, 127, 0],
// [38, 13., 0.25, 127, 0],
// [38, 15., 0.25, 127, 0],
// [42, 0., 0.25, 127, 0],
// [42, 0.5, 0.25, 127, 0],
// [42, 1., 0.25, 127, 0],
// [42, 1.5, 0.25, 127, 0],
// [42, 2., 0.25, 127, 0],
// [42, 2.5, 0.25, 127, 0],
// [42, 3., 0.25, 127, 0],
// [42, 3.5, 0.25, 127, 0],
// [42, 4., 0.25, 127, 0],
// [42, 4.5, 0.25, 127, 0],
// [42, 5., 0.25, 127, 0],
// [42, 5.5, 0.25, 127, 0],
// [42, 6., 0.25, 127, 0],
// [42, 6.5, 0.25, 127, 0],
// [42, 7., 0.25, 127, 0],
// [42, 7.5, 0.25, 127, 0],
// [42, 8., 0.25, 127, 0],
// [42, 8.5, 0.25, 127, 0],
// [42, 9., 0.25, 127, 0],
// [42, 9.5, 0.25, 127, 0],
// [42, 10., 0.25, 127, 0],
// [42, 10.5, 0.25, 127, 0],
// [42, 11., 0.25, 127, 0],
// [42, 11.5, 0.25, 127, 0],
// [42, 12., 0.25, 127, 0],
// [42, 12.5, 0.25, 127, 0],
// [42, 13., 0.25, 127, 0],
// [42, 13.5, 0.25, 127, 0],
// [42, 14., 0.25, 127, 0],
// [42, 14.5, 0.25, 127, 0],
// [42, 15., 0.25, 127, 0],
// [42, 15.5, 0.25, 127, 0]];
// exports.test_input = test_input;

